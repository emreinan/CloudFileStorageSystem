// <auto-generated />
using System;
using AuthenticationAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthenticationAPI.Persistence.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20241226200856_Mig-1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedaAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 126, 42, 52, 32, 67, 40, 151, 113, 191, 249, 249, 4, 228, 159, 214, 175, 92, 47, 191, 22, 70, 243, 153, 19, 242, 31, 57, 116, 10, 130, 174, 104, 127, 23, 205, 199, 193, 210, 142, 120, 139, 83, 41, 126, 85, 139, 45, 189, 128, 60, 158, 24, 42, 29, 180, 106, 77, 228, 31, 165, 129, 7, 210, 191 },
                            PasswordSalt = new byte[] { 136, 29, 207, 181, 220, 101, 216, 15, 193, 178, 245, 19, 199, 57, 248, 158, 228, 180, 203, 213, 196, 21, 239, 111, 195, 66, 19, 169, 216, 113, 88, 217, 147, 65, 22, 176, 38, 160, 196, 109, 23, 164, 197, 90, 162, 164, 21, 32, 203, 238, 243, 232, 36, 78, 148, 28, 99, 101, 178, 132, 6, 113, 106, 81, 155, 95, 62, 217, 8, 9, 79, 214, 218, 12, 51, 147, 174, 113, 127, 250, 21, 5, 222, 181, 24, 134, 91, 130, 51, 140, 120, 43, 57, 215, 33, 64, 105, 162, 173, 112, 177, 215, 9, 1, 3, 235, 240, 4, 117, 2, 21, 212, 0, 142, 86, 44, 33, 134, 23, 205, 82, 37, 82, 52, 194, 141, 99, 39 },
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@user.com",
                            Name = "User",
                            PasswordHash = new byte[] { 126, 42, 52, 32, 67, 40, 151, 113, 191, 249, 249, 4, 228, 159, 214, 175, 92, 47, 191, 22, 70, 243, 153, 19, 242, 31, 57, 116, 10, 130, 174, 104, 127, 23, 205, 199, 193, 210, 142, 120, 139, 83, 41, 126, 85, 139, 45, 189, 128, 60, 158, 24, 42, 29, 180, 106, 77, 228, 31, 165, 129, 7, 210, 191 },
                            PasswordSalt = new byte[] { 136, 29, 207, 181, 220, 101, 216, 15, 193, 178, 245, 19, 199, 57, 248, 158, 228, 180, 203, 213, 196, 21, 239, 111, 195, 66, 19, 169, 216, 113, 88, 217, 147, 65, 22, 176, 38, 160, 196, 109, 23, 164, 197, 90, 162, 164, 21, 32, 203, 238, 243, 232, 36, 78, 148, 28, 99, 101, 178, 132, 6, 113, 106, 81, 155, 95, 62, 217, 8, 9, 79, 214, 218, 12, 51, 147, 174, 113, 127, 250, 21, 5, 222, 181, 24, 134, 91, 130, 51, 140, 120, 43, 57, 215, 33, 64, 105, 162, 173, 112, 177, 215, 9, 1, 3, 235, 240, 4, 117, 2, 21, 212, 0, 142, 86, 44, 33, 134, 23, 205, 82, 37, 82, 52, 194, 141, 99, 39 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AuthenticationAPI.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

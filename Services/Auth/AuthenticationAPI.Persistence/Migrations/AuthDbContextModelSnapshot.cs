// <auto-generated />
using System;
using AuthenticationAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthenticationAPI.Persistence.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedaAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 36, 148, 133, 233, 214, 153, 237, 14, 49, 191, 45, 157, 151, 180, 18, 82, 100, 255, 117, 30, 227, 151, 118, 139, 141, 78, 23, 70, 110, 254, 137, 116, 188, 12, 251, 68, 136, 205, 62, 184, 14, 238, 70, 203, 50, 65, 128, 194, 223, 68, 236, 49, 139, 147, 142, 28, 229, 182, 5, 68, 141, 63, 185, 19 },
                            PasswordSalt = new byte[] { 176, 238, 208, 121, 239, 111, 44, 13, 91, 71, 120, 239, 111, 140, 186, 38, 151, 39, 200, 140, 23, 180, 132, 188, 150, 245, 121, 40, 93, 253, 228, 94, 185, 223, 251, 222, 166, 51, 3, 231, 86, 45, 9, 82, 65, 160, 160, 16, 114, 34, 227, 221, 143, 156, 169, 251, 239, 68, 186, 164, 38, 30, 94, 26, 185, 238, 161, 54, 71, 186, 219, 251, 76, 117, 226, 4, 76, 64, 165, 186, 177, 246, 146, 202, 51, 18, 171, 67, 130, 136, 90, 221, 227, 203, 245, 44, 26, 240, 4, 153, 84, 31, 104, 118, 214, 219, 112, 70, 89, 124, 91, 43, 76, 50, 39, 11, 111, 43, 4, 202, 181, 38, 129, 126, 22, 17, 113, 19 },
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "user1@user.com",
                            Name = "User1",
                            PasswordHash = new byte[] { 36, 148, 133, 233, 214, 153, 237, 14, 49, 191, 45, 157, 151, 180, 18, 82, 100, 255, 117, 30, 227, 151, 118, 139, 141, 78, 23, 70, 110, 254, 137, 116, 188, 12, 251, 68, 136, 205, 62, 184, 14, 238, 70, 203, 50, 65, 128, 194, 223, 68, 236, 49, 139, 147, 142, 28, 229, 182, 5, 68, 141, 63, 185, 19 },
                            PasswordSalt = new byte[] { 176, 238, 208, 121, 239, 111, 44, 13, 91, 71, 120, 239, 111, 140, 186, 38, 151, 39, 200, 140, 23, 180, 132, 188, 150, 245, 121, 40, 93, 253, 228, 94, 185, 223, 251, 222, 166, 51, 3, 231, 86, 45, 9, 82, 65, 160, 160, 16, 114, 34, 227, 221, 143, 156, 169, 251, 239, 68, 186, 164, 38, 30, 94, 26, 185, 238, 161, 54, 71, 186, 219, 251, 76, 117, 226, 4, 76, 64, 165, 186, 177, 246, 146, 202, 51, 18, 171, 67, 130, 136, 90, 221, 227, 203, 245, 44, 26, 240, 4, 153, 84, 31, 104, 118, 214, 219, 112, 70, 89, 124, 91, 43, 76, 50, 39, 11, 111, 43, 4, 202, 181, 38, 129, 126, 22, 17, 113, 19 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AuthenticationAPI.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

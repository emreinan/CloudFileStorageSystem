// <auto-generated />
using System;
using AuthenticationAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthenticationAPI.Persistence.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20241226194131_Mig-2")]
    partial class Mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedaAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 188, 45, 127, 31, 147, 63, 229, 153, 100, 69, 217, 169, 85, 140, 169, 235, 148, 23, 226, 246, 124, 100, 9, 221, 84, 143, 6, 243, 56, 186, 138, 238, 129, 100, 35, 98, 61, 208, 149, 69, 102, 32, 41, 170, 230, 75, 165, 49, 86, 78, 63, 69, 214, 148, 181, 254, 79, 231, 201, 64, 216, 255, 111, 143 },
                            PasswordSalt = new byte[] { 135, 80, 12, 52, 51, 109, 17, 58, 78, 125, 124, 81, 146, 200, 235, 191, 10, 246, 116, 2, 8, 92, 134, 160, 218, 25, 110, 125, 175, 134, 23, 187, 238, 56, 134, 95, 140, 245, 59, 46, 102, 11, 230, 215, 194, 215, 59, 122, 31, 192, 98, 28, 252, 35, 5, 41, 69, 245, 0, 177, 50, 190, 108, 116, 244, 28, 199, 159, 77, 75, 94, 23, 199, 194, 232, 37, 42, 166, 42, 207, 92, 58, 33, 156, 96, 204, 67, 250, 17, 94, 239, 112, 48, 81, 31, 111, 132, 121, 10, 39, 101, 138, 221, 82, 133, 212, 178, 72, 113, 51, 194, 104, 60, 24, 219, 152, 188, 174, 75, 160, 193, 85, 220, 237, 68, 18, 156, 210 },
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@user.com",
                            Name = "User",
                            PasswordHash = new byte[] { 188, 45, 127, 31, 147, 63, 229, 153, 100, 69, 217, 169, 85, 140, 169, 235, 148, 23, 226, 246, 124, 100, 9, 221, 84, 143, 6, 243, 56, 186, 138, 238, 129, 100, 35, 98, 61, 208, 149, 69, 102, 32, 41, 170, 230, 75, 165, 49, 86, 78, 63, 69, 214, 148, 181, 254, 79, 231, 201, 64, 216, 255, 111, 143 },
                            PasswordSalt = new byte[] { 135, 80, 12, 52, 51, 109, 17, 58, 78, 125, 124, 81, 146, 200, 235, 191, 10, 246, 116, 2, 8, 92, 134, 160, 218, 25, 110, 125, 175, 134, 23, 187, 238, 56, 134, 95, 140, 245, 59, 46, 102, 11, 230, 215, 194, 215, 59, 122, 31, 192, 98, 28, 252, 35, 5, 41, 69, 245, 0, 177, 50, 190, 108, 116, 244, 28, 199, 159, 77, 75, 94, 23, 199, 194, 232, 37, 42, 166, 42, 207, 92, 58, 33, 156, 96, 204, 67, 250, 17, 94, 239, 112, 48, 81, 31, 111, 132, 121, 10, 39, 101, 138, 221, 82, 133, 212, 178, 72, 113, 51, 194, 104, 60, 24, 219, 152, 188, 174, 75, 160, 193, 85, 220, 237, 68, 18, 156, 210 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AuthenticationAPI.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
